knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
# Read data
df <- read.csv("D:/multiple-distributions/Data/SwimmingTimes.csv")
str(df)
# Change categorical variables to factors
df$Name <- as.factor(df$Name)
df$Category <- as.factor(df$Category)
str(df)
# Summary statistics
summary(df)
# Get the maximum number of Name count
max(table(df$Name))
# Swimmers which competed in two different categories
tbl <- as.data.frame(table(df$Name))
bi_swimmmers <- tbl[tbl$Freq>1,]$Var1
# Subset dataframe to get only the data of swimmers which competed twice
bi_swimmmers_df <- df[df$Name %in% bi_swimmmers,]
bi_swimmmers_df[order(bi_swimmmers_df$Name),]
# As there are some swimmers who competed in two different categories we will remove them from one competition. By doing so we will have each swimmer only once in the data set.
df <- df[-c(2,5,34,19,42,51,79),]
# New Category sizes
summary(df)
# Histogram
hist(df$Time, breaks = 50, main = "", xlab = "Time (seconds)", ylab="Frequency", cex.lab = 1.5)
# Choice of a good width?
# Label Size?
# Histogram for each Category
library(plyr)
mu <- ddply(df, "Category", summarise, grp.mean=mean(Time))
p <- ggplot(df, aes(x=Time)) +
geom_histogram(color="black", fill="white", binwidth = 0.4) +
facet_grid(Category ~ ., scales="free_y") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16),
legend.text=element_text(size=12)) +
theme(legend.position='none') +
labs(x="Time (seconds)", y = "Frequency")
# Add mean lines
p + geom_vline(data=mu, aes(xintercept=grp.mean, color="red"), linetype="solid")
# Boxplot of each category
df %>%
ggplot(aes(factor(Category), Time, fill = factor(Category))) +
geom_boxplot() +
theme(panel.spacing = unit(0, "lines"),
panel.border = element_rect(fill = NA),
strip.background = element_blank(),
#axis.title.x = element_blank(),
legend.position = "none",
strip.placement = "outside") +
theme(panel.background = element_blank()) +
theme(axis.line = element_line(colour = "black")) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1)) +
theme(legend.position='none') +
labs(y="Time (seconds)", x = "Category") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16),
legend.text=element_text(size=12))
# Color? Should we use black (the same color) for all boxes?
# Mean of each category
hm <- setNames(aggregate(df$Time, by=list(df$Category), FUN=mean), c("Category", "Mean"))
# Variance of each category
hm$Variance <- tapply(df$Time, df$Category, FUN = var)
# Standard Deviation of each category
hm$`Standard Deviation` <- tapply(df$Time, df$Category, FUN = sd)
hm
# qqplots for normality check
ggplot(df, aes(sample = Time)) +
stat_qq() +
stat_qq_line() +
facet_wrap(~Category, scales = "free") +
labs(y="Sample", x = "Theoretical")
# !!! OPTIONAL !!!
#generate vector of 15 values that follow standard normal distribution
data <- rnorm(15)
data <- as.data.frame(data)
ggplot(data, aes(sample = data)) +
stat_qq() +
stat_qq_line()
# !!! not included in analysis (optional) !!!
# Shapiro test for normality check
shapiro.test(df[df$Category=="Backstroke",]$Time)
shapiro.test(df[df$Category=="Breaststroke",]$Time)
shapiro.test(df[df$Category=="Butterfly",]$Time)
shapiro.test(df[df$Category=="Freestyle",]$Time)
shapiro.test(df[df$Category=="Medley",]$Time)
# Standard Deviation of each category
hm <- setNames(aggregate(df$Time, by=list(df$Category), FUN=sd), c("Category", "Standard Deviation"))
# Variance of each category
hm$Variance <- tapply(df$Time, df$Category, FUN = var)
hm
# !!! OPTIONAL !!!
library(car)
# Levene's test with one independent variable
leveneTest(Time ~ Category, data = df)
# One-way ANNOVA
res_aov <- aov(Time ~ Category, data = df)
summary(res_aov)
# No adjustment
pairwise.t.test(df$Time, df$Category, p.adjust.method = "none")
# "bonferroni" adjustment (more conservative)
pairwise.t.test(df$Time, df$Category, p.adjust.method = "bonferroni")
# "holm" adjustment ->  less conservative
pairwise.t.test(df$Time, df$Category, p.adjust.method = "holm")
df.Backstroke<-filter(df,Category=='Backstroke')
df.Breaststroke<-filter(df,Category=='Breaststroke')
df.Butterfly<-filter(df,Category=='Butterfly')
df.Freestyle<-filter(df,Category=='Freestyle')
df.Medley<-filter(df,Category=='Medley')
summary(df.Backstroke)
IQR(df.Backstroke$Time)
summary(df.Breaststroke)
summary(df.Butterfly)
IQR(df.Butterfly$Time)
summary(df.Freestyle)
summary(df.Medley)
unlink("source_cache", recursive = TRUE)
knitr::opts_chunk$set(cache=FALSE)
knitr::opts_chunk$set(cache=FALSE)
library(ggplot2)
library(dplyr)
# Read data
df <- read.csv("D:/multiple-distributions/Data/SwimmingTimes.csv")
str(df)
# Change categorical variables to factors
df$Name <- as.factor(df$Name)
df$Category <- as.factor(df$Category)
str(df)
# Summary statistics
summary(df)
# Get the maximum number of Name count
max(table(df$Name))
# Swimmers which competed in two different categories
tbl <- as.data.frame(table(df$Name))
bi_swimmmers <- tbl[tbl$Freq>1,]$Var1
# Subset dataframe to get only the data of swimmers which competed twice
bi_swimmmers_df <- df[df$Name %in% bi_swimmmers,]
bi_swimmmers_df[order(bi_swimmmers_df$Name),]
# As there are some swimmers who competed in two different categories we will remove them from one competition. By doing so we will have each swimmer only once in the data set.
df <- df[-c(2,5,34,19,42,51,79),]
# New Category sizes
summary(df)
# Histogram
hist(df$Time, breaks = 50, main = "", xlab = "Time (seconds)", ylab="Frequency", cex.lab = 1.5)
# Choice of a good width?
# Label Size?
# Histogram for each Category
library(plyr)
mu <- ddply(df, "Category", summarise, grp.mean=mean(Time))
p <- ggplot(df, aes(x=Time)) +
geom_histogram(color="black", fill="white", binwidth = 0.4) +
facet_grid(Category ~ ., scales="free_y") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16),
legend.text=element_text(size=12)) +
theme(legend.position='none') +
labs(x="Time (seconds)", y = "Frequency")
# Add mean lines
p + geom_vline(data=mu, aes(xintercept=grp.mean, color="red"), linetype="solid")
# Boxplot of each category
df %>%
ggplot(aes(factor(Category), Time, fill = factor(Category))) +
geom_boxplot() +
theme(panel.spacing = unit(0, "lines"),
panel.border = element_rect(fill = NA),
strip.background = element_blank(),
#axis.title.x = element_blank(),
legend.position = "none",
strip.placement = "outside") +
theme(panel.background = element_blank()) +
theme(axis.line = element_line(colour = "black")) +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1)) +
theme(legend.position='none') +
labs(y="Time (seconds)", x = "Category") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16),
legend.text=element_text(size=12))
# Color? Should we use black (the same color) for all boxes?
# Mean of each category
hm <- setNames(aggregate(df$Time, by=list(df$Category), FUN=mean), c("Category", "Mean"))
# Variance of each category
hm$Variance <- tapply(df$Time, df$Category, FUN = var)
# Standard Deviation of each category
hm$`Standard Deviation` <- tapply(df$Time, df$Category, FUN = sd)
hm
# qqplots for normality check
ggplot(df, aes(sample = Time)) +
stat_qq() +
stat_qq_line() +
facet_wrap(~Category, scales = "free") +
labs(y="Sample", x = "Theoretical")
# !!! OPTIONAL !!!
#generate vector of 15 values that follow standard normal distribution
data <- rnorm(15)
data <- as.data.frame(data)
ggplot(data, aes(sample = data)) +
stat_qq() +
stat_qq_line()
# !!! not included in analysis (optional) !!!
# Shapiro test for normality check
shapiro.test(df[df$Category=="Backstroke",]$Time)
shapiro.test(df[df$Category=="Breaststroke",]$Time)
shapiro.test(df[df$Category=="Butterfly",]$Time)
shapiro.test(df[df$Category=="Freestyle",]$Time)
shapiro.test(df[df$Category=="Medley",]$Time)
# Standard Deviation of each category
hm <- setNames(aggregate(df$Time, by=list(df$Category), FUN=sd), c("Category", "Standard Deviation"))
# Variance of each category
hm$Variance <- tapply(df$Time, df$Category, FUN = var)
hm
# !!! OPTIONAL !!!
library(car)
# Levene's test with one independent variable
leveneTest(Time ~ Category, data = df)
# One-way ANNOVA
res_aov <- aov(Time ~ Category, data = df)
summary(res_aov)
# No adjustment
pairwise.t.test(df$Time, df$Category, p.adjust.method = "none")
# "bonferroni" adjustment (more conservative)
pairwise.t.test(df$Time, df$Category, p.adjust.method = "bonferroni")
# "holm" adjustment ->  less conservative
pairwise.t.test(df$Time, df$Category, p.adjust.method = "holm")
df.Backstroke<-filter(df,Category=='Backstroke')
df.Breaststroke<-filter(df,Category=='Breaststroke')
df.Butterfly<-filter(df,Category=='Butterfly')
df.Freestyle<-filter(df,Category=='Freestyle')
df.Medley<-filter(df,Category=='Medley')
summary(df.Backstroke)
IQR(df.Backstroke$Time)
summary(df.Breaststroke)
summary(df.Butterfly)
IQR(df.Butterfly$Time)
summary(df.Freestyle)
summary(df.Medley)
